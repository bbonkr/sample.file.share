/* tslint:disable */
/* eslint-disable */
/**
 *  1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ApiResponseModel
 */
export interface ApiResponseModel {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseModel
     */
    statusCode?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseModel
     */
    message?: string | null;
}
/**
 * 
 * @export
 * @interface CreateUserCommand
 */
export interface CreateUserCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateUserCommand
     */
    userName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserCommand
     */
    displayName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserCommand
     */
    email?: string | null;
}
/**
 * 
 * @export
 * @interface CreateUserResult
 */
export interface CreateUserResult {
    /**
     * 
     * @type {string}
     * @memberof CreateUserResult
     */
    userName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserResult
     */
    displayName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserResult
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserResult
     */
    id?: string | null;
}
/**
 * 
 * @export
 * @interface CreateUserResultApiResponseModel
 */
export interface CreateUserResultApiResponseModel {
    /**
     * 
     * @type {number}
     * @memberof CreateUserResultApiResponseModel
     */
    statusCode?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateUserResultApiResponseModel
     */
    message?: string | null;
    /**
     * 
     * @type {CreateUserResult}
     * @memberof CreateUserResultApiResponseModel
     */
    data?: CreateUserResult;
}
/**
 * 
 * @export
 * @interface FileItemModel
 */
export interface FileItemModel {
    /**
     * 
     * @type {string}
     * @memberof FileItemModel
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FileItemModel
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FileItemModel
     */
    contentType?: string | null;
    /**
     * 
     * @type {number}
     * @memberof FileItemModel
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof FileItemModel
     */
    uri?: string | null;
    /**
     * 
     * @type {number}
     * @memberof FileItemModel
     */
    createdAt?: number;
}
/**
 * 
 * @export
 * @interface FileItemModelIPagedModel
 */
export interface FileItemModelIPagedModel {
    /**
     * 
     * @type {number}
     * @memberof FileItemModelIPagedModel
     */
    currentPage?: number;
    /**
     * 
     * @type {Array<FileItemModel>}
     * @memberof FileItemModelIPagedModel
     */
    items?: Array<FileItemModel> | null;
    /**
     * 
     * @type {number}
     * @memberof FileItemModelIPagedModel
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof FileItemModelIPagedModel
     */
    totalItems?: number;
    /**
     * 
     * @type {number}
     * @memberof FileItemModelIPagedModel
     */
    totalPages?: number;
}
/**
 * 
 * @export
 * @interface FileItemModelIPagedModelApiResponseModel
 */
export interface FileItemModelIPagedModelApiResponseModel {
    /**
     * 
     * @type {number}
     * @memberof FileItemModelIPagedModelApiResponseModel
     */
    statusCode?: number;
    /**
     * 
     * @type {string}
     * @memberof FileItemModelIPagedModelApiResponseModel
     */
    message?: string | null;
    /**
     * 
     * @type {FileItemModelIPagedModel}
     * @memberof FileItemModelIPagedModelApiResponseModel
     */
    data?: FileItemModelIPagedModel;
}
/**
 * 
 * @export
 * @interface FindByEmailResult
 */
export interface FindByEmailResult {
    /**
     * 
     * @type {string}
     * @memberof FindByEmailResult
     */
    userName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FindByEmailResult
     */
    displayName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FindByEmailResult
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FindByEmailResult
     */
    id?: string | null;
}
/**
 * 
 * @export
 * @interface FindByEmailResultApiResponseModel
 */
export interface FindByEmailResultApiResponseModel {
    /**
     * 
     * @type {number}
     * @memberof FindByEmailResultApiResponseModel
     */
    statusCode?: number;
    /**
     * 
     * @type {string}
     * @memberof FindByEmailResultApiResponseModel
     */
    message?: string | null;
    /**
     * 
     * @type {FindByEmailResult}
     * @memberof FindByEmailResultApiResponseModel
     */
    data?: FindByEmailResult;
}
/**
 * 
 * @export
 * @interface GenerateTokenRequest
 */
export interface GenerateTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof GenerateTokenRequest
     */
    to: string;
    /**
     * 
     * @type {number}
     * @memberof GenerateTokenRequest
     */
    expiresOn?: number;
}
/**
 * 
 * @export
 * @interface ShareFileResult
 */
export interface ShareFileResult {
    /**
     * 
     * @type {string}
     * @memberof ShareFileResult
     */
    token?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShareFileResult
     */
    expiresOn?: number;
}
/**
 * 
 * @export
 * @interface ShareFileResultApiResponseModel
 */
export interface ShareFileResultApiResponseModel {
    /**
     * 
     * @type {number}
     * @memberof ShareFileResultApiResponseModel
     */
    statusCode?: number;
    /**
     * 
     * @type {string}
     * @memberof ShareFileResultApiResponseModel
     */
    message?: string | null;
    /**
     * 
     * @type {ShareFileResult}
     * @memberof ShareFileResultApiResponseModel
     */
    data?: ShareFileResult;
}
/**
 * 
 * @export
 * @interface UploadFileResult
 */
export interface UploadFileResult {
    /**
     * 
     * @type {string}
     * @memberof UploadFileResult
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UploadFileResult
     */
    uri?: string | null;
}
/**
 * 
 * @export
 * @interface UploadFileResultIListApiResponseModel
 */
export interface UploadFileResultIListApiResponseModel {
    /**
     * 
     * @type {number}
     * @memberof UploadFileResultIListApiResponseModel
     */
    statusCode?: number;
    /**
     * 
     * @type {string}
     * @memberof UploadFileResultIListApiResponseModel
     */
    message?: string | null;
    /**
     * 
     * @type {Array<UploadFileResult>}
     * @memberof UploadFileResultIListApiResponseModel
     */
    data?: Array<UploadFileResult> | null;
}
/**
 * 
 * @export
 * @interface UserModel
 */
export interface UserModel {
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    userName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    displayName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    id?: string | null;
}
/**
 * 
 * @export
 * @interface UserModelIPagedModel
 */
export interface UserModelIPagedModel {
    /**
     * 
     * @type {number}
     * @memberof UserModelIPagedModel
     */
    currentPage?: number;
    /**
     * 
     * @type {Array<UserModel>}
     * @memberof UserModelIPagedModel
     */
    items?: Array<UserModel> | null;
    /**
     * 
     * @type {number}
     * @memberof UserModelIPagedModel
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof UserModelIPagedModel
     */
    totalItems?: number;
    /**
     * 
     * @type {number}
     * @memberof UserModelIPagedModel
     */
    totalPages?: number;
}
/**
 * 
 * @export
 * @interface UserModelIPagedModelApiResponseModel
 */
export interface UserModelIPagedModelApiResponseModel {
    /**
     * 
     * @type {number}
     * @memberof UserModelIPagedModelApiResponseModel
     */
    statusCode?: number;
    /**
     * 
     * @type {string}
     * @memberof UserModelIPagedModelApiResponseModel
     */
    message?: string | null;
    /**
     * 
     * @type {UserModelIPagedModel}
     * @memberof UserModelIPagedModelApiResponseModel
     */
    data?: UserModelIPagedModel;
}

/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} fileId 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FilesDelete: async (fileId: string, xApiKey?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('apiv10FilesDelete', 'fileId', fileId)
            const localVarPath = `/api/v1/Files/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} token 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FilesFileByToken: async (token: string, xApiKey?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('apiv10FilesFileByToken', 'token', token)
            const localVarPath = `/api/v1/Files/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fileId 
         * @param {string} [xApiKey] 
         * @param {GenerateTokenRequest} [generateTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FilesGenerateToken: async (fileId: string, xApiKey?: string, generateTokenRequest?: GenerateTokenRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('apiv10FilesGenerateToken', 'fileId', fileId)
            const localVarPath = `/api/v1/Files/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(generateTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [xApiKey] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FilesMyFiles: async (xApiKey?: string, page?: number, limit?: number, keyword?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [xApiKey] 
         * @param {Array<any>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FilesUpload: async (xApiKey?: string, files?: Array<any>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} fileId 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10FilesDelete(fileId: string, xApiKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10FilesDelete(fileId, xApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} token 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10FilesFileByToken(token: string, xApiKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10FilesFileByToken(token, xApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} fileId 
         * @param {string} [xApiKey] 
         * @param {GenerateTokenRequest} [generateTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10FilesGenerateToken(fileId: string, xApiKey?: string, generateTokenRequest?: GenerateTokenRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareFileResultApiResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10FilesGenerateToken(fileId, xApiKey, generateTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [xApiKey] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10FilesMyFiles(xApiKey?: string, page?: number, limit?: number, keyword?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileItemModelIPagedModelApiResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10FilesMyFiles(xApiKey, page, limit, keyword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [xApiKey] 
         * @param {Array<any>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10FilesUpload(xApiKey?: string, files?: Array<any>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadFileResultIListApiResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10FilesUpload(xApiKey, files, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} fileId 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FilesDelete(fileId: string, xApiKey?: string, options?: any): AxiosPromise<ApiResponseModel> {
            return localVarFp.apiv10FilesDelete(fileId, xApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} token 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FilesFileByToken(token: string, xApiKey?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiv10FilesFileByToken(token, xApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} fileId 
         * @param {string} [xApiKey] 
         * @param {GenerateTokenRequest} [generateTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FilesGenerateToken(fileId: string, xApiKey?: string, generateTokenRequest?: GenerateTokenRequest, options?: any): AxiosPromise<ShareFileResultApiResponseModel> {
            return localVarFp.apiv10FilesGenerateToken(fileId, xApiKey, generateTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [xApiKey] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FilesMyFiles(xApiKey?: string, page?: number, limit?: number, keyword?: string, options?: any): AxiosPromise<FileItemModelIPagedModelApiResponseModel> {
            return localVarFp.apiv10FilesMyFiles(xApiKey, page, limit, keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [xApiKey] 
         * @param {Array<any>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FilesUpload(xApiKey?: string, files?: Array<any>, options?: any): AxiosPromise<UploadFileResultIListApiResponseModel> {
            return localVarFp.apiv10FilesUpload(xApiKey, files, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI {
    /**
     * 
     * @param {string} fileId 
     * @param {string} [xApiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public apiv10FilesDelete(fileId: string, xApiKey?: string, options?: any) {
        return FilesApiFp(this.configuration).apiv10FilesDelete(fileId, xApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} token 
     * @param {string} [xApiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public apiv10FilesFileByToken(token: string, xApiKey?: string, options?: any) {
        return FilesApiFp(this.configuration).apiv10FilesFileByToken(token, xApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} fileId 
     * @param {string} [xApiKey] 
     * @param {GenerateTokenRequest} [generateTokenRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public apiv10FilesGenerateToken(fileId: string, xApiKey?: string, generateTokenRequest?: GenerateTokenRequest, options?: any) {
        return FilesApiFp(this.configuration).apiv10FilesGenerateToken(fileId, xApiKey, generateTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [xApiKey] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [keyword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public apiv10FilesMyFiles(xApiKey?: string, page?: number, limit?: number, keyword?: string, options?: any) {
        return FilesApiFp(this.configuration).apiv10FilesMyFiles(xApiKey, page, limit, keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [xApiKey] 
     * @param {Array<any>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public apiv10FilesUpload(xApiKey?: string, files?: Array<any>, options?: any) {
        return FilesApiFp(this.configuration).apiv10FilesUpload(xApiKey, files, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateUserCommand} [createUserCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10UsersCreate: async (createUserCommand?: CreateUserCommand, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10UsersDelete: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiv10UsersDelete', 'userId', userId)
            const localVarPath = `/api/v1/Users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10UsersFindByEmail: async (email: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('apiv10UsersFindByEmail', 'email', email)
            const localVarPath = `/api/v1/Users/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10UsersGetUsers: async (page?: number, limit?: number, keyword?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateUserCommand} [createUserCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10UsersCreate(createUserCommand?: CreateUserCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserResultApiResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10UsersCreate(createUserCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10UsersDelete(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10UsersDelete(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10UsersFindByEmail(email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindByEmailResultApiResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10UsersFindByEmail(email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10UsersGetUsers(page?: number, limit?: number, keyword?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserModelIPagedModelApiResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10UsersGetUsers(page, limit, keyword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateUserCommand} [createUserCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10UsersCreate(createUserCommand?: CreateUserCommand, options?: any): AxiosPromise<CreateUserResultApiResponseModel> {
            return localVarFp.apiv10UsersCreate(createUserCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10UsersDelete(userId: string, options?: any): AxiosPromise<ApiResponseModel> {
            return localVarFp.apiv10UsersDelete(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10UsersFindByEmail(email: string, options?: any): AxiosPromise<FindByEmailResultApiResponseModel> {
            return localVarFp.apiv10UsersFindByEmail(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10UsersGetUsers(page?: number, limit?: number, keyword?: string, options?: any): AxiosPromise<UserModelIPagedModelApiResponseModel> {
            return localVarFp.apiv10UsersGetUsers(page, limit, keyword, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {CreateUserCommand} [createUserCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiv10UsersCreate(createUserCommand?: CreateUserCommand, options?: any) {
        return UsersApiFp(this.configuration).apiv10UsersCreate(createUserCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiv10UsersDelete(userId: string, options?: any) {
        return UsersApiFp(this.configuration).apiv10UsersDelete(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiv10UsersFindByEmail(email: string, options?: any) {
        return UsersApiFp(this.configuration).apiv10UsersFindByEmail(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [keyword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiv10UsersGetUsers(page?: number, limit?: number, keyword?: string, options?: any) {
        return UsersApiFp(this.configuration).apiv10UsersGetUsers(page, limit, keyword, options).then((request) => request(this.axios, this.basePath));
    }
}


